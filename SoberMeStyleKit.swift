//
//  SoberMeStyleKit.swift
//  SoberMe
//
//  Created by Cameron Laury on 3/2/17.
//  Copyright © 2017 com.Cameron. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SoberMeStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let soberColor: UIColor = UIColor(red: 0.646, green: 0.646, blue: 0.646, alpha: 1.000)
        static let greenForLogo: UIColor = UIColor(red: 0.447, green: 0.859, blue: 0.392, alpha: 1.000)
        static let textColorForButtons: UIColor = UIColor(red: 0.954, green: 0.954, blue: 0.954, alpha: 1.000)
        static let redForSignUp: UIColor = UIColor(red: 0.999, green: 0.286, blue: 0.286, alpha: 1.000)
        static let textFieldColor: UIColor = UIColor(red: 0.835, green: 0.835, blue: 0.835, alpha: 1.000)
        static let btnShadowColor: UIColor = UIColor(red: 0.333, green: 0.333, blue: 0.333, alpha: 1.000)
        static let btnShadow: NSShadow = NSShadow(color: SoberMeStyleKit.btnShadowColor.withAlphaComponent(0.35 * SoberMeStyleKit.btnShadowColor.cgColor.alpha), offset: CGSize(width: 0, height: 1), blurRadius: 1)
    }

    //// Colors

    public dynamic class var soberColor: UIColor { return Cache.soberColor }
    public dynamic class var greenForLogo: UIColor { return Cache.greenForLogo }
    public dynamic class var textColorForButtons: UIColor { return Cache.textColorForButtons }
    public dynamic class var redForSignUp: UIColor { return Cache.redForSignUp }
    public dynamic class var textFieldColor: UIColor { return Cache.textFieldColor }
    public dynamic class var btnShadowColor: UIColor { return Cache.btnShadowColor }

    //// Shadows

    public dynamic class var btnShadow: NSShadow { return Cache.btnShadow }

    //// Drawing Methods

    public dynamic class func drawLogInScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 286), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 286), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 286)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 46, y: 201, width: 129, height: 29)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        SoberMeStyleKit.drawSignInBtn(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Group
        //// passWordTextField Drawing
        let passWordTextFieldPath = UIBezierPath(roundedRect: CGRect(x: 36, y: 140, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        passWordTextFieldPath.fill()


        //// userNameTextField Drawing
        let userNameTextFieldPath = UIBezierPath(roundedRect: CGRect(x: 36, y: 114, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        userNameTextFieldPath.fill()




        //// signUpBtnText Drawing
        let signUpBtnTextRect = CGRect(x: 61, y: 239, width: 100, height: 9)
        let signUpBtnTextTextContent = "Don’t have an account? Sign up!"
        let signUpBtnTextStyle = NSMutableParagraphStyle()
        signUpBtnTextStyle.alignment = .left
        let signUpBtnTextFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 6), NSForegroundColorAttributeName: UIColor.darkGray, NSParagraphStyleAttributeName: signUpBtnTextStyle]

        let signUpBtnTextTextHeight: CGFloat = signUpBtnTextTextContent.boundingRect(with: CGSize(width: signUpBtnTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: signUpBtnTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: signUpBtnTextRect)
        signUpBtnTextTextContent.draw(in: CGRect(x: signUpBtnTextRect.minX, y: signUpBtnTextRect.minY + (signUpBtnTextRect.height - signUpBtnTextTextHeight) / 2, width: signUpBtnTextRect.width, height: signUpBtnTextTextHeight), withAttributes: signUpBtnTextFontAttributes)
        context.restoreGState()


        //// forgotPassword Drawing
        let forgotPasswordRect = CGRect(x: 75, y: 162, width: 71, height: 9)
        let forgotPasswordTextContent = "Forgot your password?"
        let forgotPasswordStyle = NSMutableParagraphStyle()
        forgotPasswordStyle.alignment = .left
        let forgotPasswordFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 6), NSForegroundColorAttributeName: UIColor.darkGray, NSParagraphStyleAttributeName: forgotPasswordStyle]

        let forgotPasswordTextHeight: CGFloat = forgotPasswordTextContent.boundingRect(with: CGSize(width: forgotPasswordRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: forgotPasswordFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: forgotPasswordRect)
        forgotPasswordTextContent.draw(in: CGRect(x: forgotPasswordRect.minX, y: forgotPasswordRect.minY + (forgotPasswordRect.height - forgotPasswordTextHeight) / 2, width: forgotPasswordRect.width, height: forgotPasswordTextHeight), withAttributes: forgotPasswordFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSignInBtn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 134, height: 31), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 134, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 134, y: resizedFrame.height / 31)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 134, resizedFrame.height / 31)


        //// Sign in Drawing
        let signInRect = CGRect(x: 2, y: 0, width: 129, height: 29)
        let signInPath = UIBezierPath(roundedRect: signInRect, cornerRadius: 14.5)
        context.saveGState()
        context.setShadow(offset: CGSize(width: SoberMeStyleKit.btnShadow.shadowOffset.width * resizedShadowScale, height: SoberMeStyleKit.btnShadow.shadowOffset.height * resizedShadowScale), blur: SoberMeStyleKit.btnShadow.shadowBlurRadius * resizedShadowScale, color: (SoberMeStyleKit.btnShadow.shadowColor as! UIColor).cgColor)
        SoberMeStyleKit.greenForLogo.setFill()
        signInPath.fill()
        context.restoreGState()

        let signInTextContent = "Sign In"
        let signInStyle = NSMutableParagraphStyle()
        signInStyle.alignment = .center
        let signInFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 12)!, NSForegroundColorAttributeName: SoberMeStyleKit.textColorForButtons, NSParagraphStyleAttributeName: signInStyle]

        let signInTextHeight: CGFloat = signInTextContent.boundingRect(with: CGSize(width: signInRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: signInFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: signInRect)
        signInTextContent.draw(in: CGRect(x: signInRect.minX, y: signInRect.minY + (signInRect.height - signInTextHeight) / 2, width: signInRect.width, height: signInTextHeight), withAttributes: signInFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSignUpBtn(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 134, height: 31), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 134, height: 31), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 134, y: resizedFrame.height / 31)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 134, resizedFrame.height / 31)


        //// sign Up Drawing
        let signUpRect = CGRect(x: 2, y: 0, width: 129, height: 29)
        let signUpPath = UIBezierPath(roundedRect: signUpRect, cornerRadius: 14.5)
        context.saveGState()
        context.setShadow(offset: CGSize(width: SoberMeStyleKit.btnShadow.shadowOffset.width * resizedShadowScale, height: SoberMeStyleKit.btnShadow.shadowOffset.height * resizedShadowScale), blur: SoberMeStyleKit.btnShadow.shadowBlurRadius * resizedShadowScale, color: (SoberMeStyleKit.btnShadow.shadowColor as! UIColor).cgColor)
        SoberMeStyleKit.redForSignUp.setFill()
        signUpPath.fill()
        context.restoreGState()

        let signUpTextContent = "Sign Up"
        let signUpStyle = NSMutableParagraphStyle()
        signUpStyle.alignment = .center
        let signUpFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 12)!, NSForegroundColorAttributeName: SoberMeStyleKit.textColorForButtons, NSParagraphStyleAttributeName: signUpStyle]

        let signUpTextHeight: CGFloat = signUpTextContent.boundingRect(with: CGSize(width: signUpRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: signUpFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: signUpRect)
        signUpTextContent.draw(in: CGRect(x: signUpRect.minX, y: signUpRect.minY + (signUpRect.height - signUpTextHeight) / 2, width: signUpRect.width, height: signUpTextHeight), withAttributes: signUpFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawSignInScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 286), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 286), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 286)


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 46, y: 201, width: 129, height: 29)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        SoberMeStyleKit.drawSignUpBtn(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// signUpBtnText Drawing
        let signUpBtnTextRect = CGRect(x: 58, y: 239, width: 105, height: 9)
        let signUpBtnTextTextContent = "Already have an account? Sign in!"
        let signUpBtnTextStyle = NSMutableParagraphStyle()
        signUpBtnTextStyle.alignment = .left
        let signUpBtnTextFontAttributes = [NSFontAttributeName: UIFont.systemFont(ofSize: 6), NSForegroundColorAttributeName: UIColor.darkGray, NSParagraphStyleAttributeName: signUpBtnTextStyle]

        let signUpBtnTextTextHeight: CGFloat = signUpBtnTextTextContent.boundingRect(with: CGSize(width: signUpBtnTextRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: signUpBtnTextFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: signUpBtnTextRect)
        signUpBtnTextTextContent.draw(in: CGRect(x: signUpBtnTextRect.minX, y: signUpBtnTextRect.minY + (signUpBtnTextRect.height - signUpBtnTextTextHeight) / 2, width: signUpBtnTextRect.width, height: signUpBtnTextTextHeight), withAttributes: signUpBtnTextFontAttributes)
        context.restoreGState()


        //// Group
        //// confirmPassword Drawing
        let confirmPasswordPath = UIBezierPath(roundedRect: CGRect(x: 36, y: 162, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        confirmPasswordPath.fill()


        //// createPassword Drawing
        let createPasswordPath = UIBezierPath(roundedRect: CGRect(x: 36, y: 136, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        createPasswordPath.fill()


        //// mailTextFIeld Drawing
        let mailTextFIeldPath = UIBezierPath(roundedRect: CGRect(x: 36, y: 110, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        mailTextFIeldPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTextFIeld(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 149, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 149, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 149, y: resizedFrame.height / 16)


        //// textField Drawing
        let textFieldPath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 149, height: 16), cornerRadius: 4)
        SoberMeStyleKit.textFieldColor.setFill()
        textFieldPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawLogo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 373, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 373, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 373, y: resizedFrame.height / 100)



        //// Image Declarations
        let groupImage = UIImage(named: "groupImage.png")!
        let groupImage2 = UIImage(named: "groupImage2.png")!
        let pathCompoundPathPathImage = UIImage(named: "pathCompoundPathPathImage.png")!

        //// logoView
        context.saveGState()
        context.scaleBy(x: 0.1, y: 0.1)



        //// <Group> 3 Drawing
        let group3Path = UIBezierPath(rect: CGRect(x: 840, y: 249, width: 2893, height: 510))
        context.saveGState()
        group3Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(groupImage.cgImage!, in: CGRect(x: 840, y: -249, width: groupImage.size.width, height: groupImage.size.height), byTiling: true)
        context.restoreGState()


        //// <Group> 6
        //// <Group> 5 Drawing
        let group5Path = UIBezierPath(rect: CGRect(x: 306, y: 0, width: 476, height: 999))
        context.saveGState()
        group5Path.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(groupImage2.cgImage!, in: CGRect(x: 306, y: 0, width: groupImage2.size.width, height: groupImage2.size.height), byTiling: true)
        context.restoreGState()


        //// <Path> + <Compound Path> + <Path> Drawing
        let pathCompoundPathPathPath = UIBezierPath(rect: CGRect(x: 0, y: 139, width: 646, height: 767))
        context.saveGState()
        pathCompoundPathPathPath.addClip()
        context.scaleBy(x: 1, y: -1)
        context.draw(pathCompoundPathPathImage.cgImage!, in: CGRect(x: 0, y: -139, width: pathCompoundPathPathImage.size.width, height: pathCompoundPathPathImage.size.height), byTiling: true)
        context.restoreGState()





        context.restoreGState()
        
        context.restoreGState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
