//
//  SoberMeStyleKit.js
//  SoberMe
//
//  Created by Cameron Laury on 3/1/17.
//  Copyright © 2017 com.Cameron. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



//// APIs you can use in your code:
//
// Available methods for drawing into <canvas> elements:
//    SoberMeStyleKit.drawLogInScreen(canvas, targetFrame*, resizing*)
//    SoberMeStyleKit.drawSignInBtn(canvas, animation, targetFrame*, resizing*)
//    SoberMeStyleKit.drawSignUpBtn(canvas, animation, targetFrame*, resizing*)
//    SoberMeStyleKit.drawSignInScreen(canvas, targetFrame*, resizing*)
//    SoberMeStyleKit.drawTextFIeld(canvas, targetFrame*, resizing*)
//    SoberMeStyleKit.drawLogo(canvas, targetFrame*, resizing*)
//
// NOTE: 'canvas' parameter can be either a <canvas> element object, or the id of a <canvas> element in your document.
//
// NOTE: Parameters marked with the '*' symbol are optional
//
// NOTE: Possible arguments for 'resizing' parameter in drawing methods are:
//   'aspectfit': The content is proportionally resized to fit into the target rectangle.
//   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
//   'stretch': The content is stretched to match the entire target rectangle.
//   'center': The content is centered in the target rectangle, but it is NOT resized.
//
// Available Colors:
//    SoberMeStyleKit.soberColor
//    SoberMeStyleKit.greenForLogo
//    SoberMeStyleKit.textColorForButtons
//    SoberMeStyleKit.redForSignUp
//    SoberMeStyleKit.textFieldColor
//    SoberMeStyleKit.btnShadowColor
//
// Available Shadows:
//    SoberMeStyleKit.btnShadow
//
// Available Utilities:
//    SoberMeStyleKit.clearCanvas(canvas)
//    SoberMeStyleKit.makeColor(r, g, b, a)  // Arguments should be from interval 0..1
//    SoberMeStyleKit.makeShadow(color, offsetX, offsetY, blurRadius)
//    SoberMeStyleKit.makeRect(x, y, width, height)


//// Create StyleKit Object
var SoberMeStyleKit = {};
(function() {

    //// Drawing Methods

    function drawLogInScreen(canvas, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 222, 286), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 222, resizedFrame.h / 286);


        //// Symbol 2 Drawing
        var symbol2Rect = makeRect(46, 201, 129, 29);
        context.save();
        context.beginPath();
        context.rect(symbol2Rect.x, symbol2Rect.y, symbol2Rect.w, symbol2Rect.h);
        context.clip();
        context.translate(symbol2Rect.x, symbol2Rect.y);

        SoberMeStyleKit.drawSignInBtn(canvas, 1, makeRect(0, 0, symbol2Rect.w, symbol2Rect.h), 'stretch');
        context.restore();


        //// Group
        //// passWordTextField Drawing
        roundedRect(context, 36, 140, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();


        //// userNameTextField Drawing
        roundedRect(context, 36, 114, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();




        //// signUpBtnText Drawing
        var signUpBtnTextRect = makeRect(61, 239, 100, 9);
        context.fillStyle = 'rgb(85, 85, 85)';
        context.font = '6px -apple-system, "Helvetica Neue", Helvetica, sans-serif';
        context.textAlign = 'left';
        var signUpBtnTextTotalHeight = 6 * 1.3;
        context.fillText('Don’t have an account? Sign up!', signUpBtnTextRect.x, signUpBtnTextRect.y + 6 + signUpBtnTextRect.h / 2 - signUpBtnTextTotalHeight / 2);


        //// forgotPassword Drawing
        var forgotPasswordRect = makeRect(75, 162, 71, 9);
        context.fillStyle = 'rgb(85, 85, 85)';
        context.font = '6px -apple-system, "Helvetica Neue", Helvetica, sans-serif';
        context.textAlign = 'left';
        var forgotPasswordTotalHeight = 6 * 1.3;
        context.fillText('Forgot your password?', forgotPasswordRect.x, forgotPasswordRect.y + 6 + forgotPasswordRect.h / 2 - forgotPasswordTotalHeight / 2);


        //// Symbol Drawing
        var symbolRect = makeRect(8, 0, 205, 56);
        context.save();
        context.beginPath();
        context.rect(symbolRect.x, symbolRect.y, symbolRect.w, symbolRect.h);
        context.clip();
        context.translate(symbolRect.x, symbolRect.y);

        SoberMeStyleKit.drawLogo(canvas, makeRect(0, 0, symbolRect.w, symbolRect.h), 'stretch');
        context.restore();
        
        context.restore();

    }

    function drawSignInBtn(canvas, animation, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 134, 31), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 134, resizedFrame.h / 31);



        //// Variable Declarations
        var blurRadius = 1 + animation;
        var opacity = 1 - 0.65 * animation;
        var changeShadow = makeShadow(makeColor(0, 0, 0, opacity), 0, 1.5, blurRadius);

        //// Sign in Drawing
        var signInRect = makeRect(2, 0, 129, 29);
        roundedRect(context, signInRect.x, signInRect.y, signInRect.w, signInRect.h, 14.5);
        context.save();
        changeShadow(context, pixelRatio);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.fillStyle = SoberMeStyleKit.greenForLogo;
        context.fill();
        context.restore();

        context.fillStyle = SoberMeStyleKit.textColorForButtons;
        context.font = '12px HelveticaNeue, "Helvetica Neue", Helvetica, Arial, sans-serif';
        context.textAlign = 'center';
        var signInTotalHeight = 12 * 1.3;
        context.fillText('Sign In', signInRect.x + signInRect.w/2, signInRect.y + 11 + signInRect.h / 2 - signInTotalHeight / 2);
        
        context.restore();

    }

    function drawSignUpBtn(canvas, animation, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 134, 31), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 134, resizedFrame.h / 31);



        //// Variable Declarations
        var blurRadius = 1 + animation;
        var opacity = 1 - 0.65 * animation;
        var changeShadow = makeShadow(makeColor(0, 0, 0, opacity), 0, 1.5, blurRadius);

        //// sign Up Drawing
        var signUpRect = makeRect(2, 0, 129, 29);
        roundedRect(context, signUpRect.x, signUpRect.y, signUpRect.w, signUpRect.h, 14.5);
        context.save();
        changeShadow(context, pixelRatio);
        context.shadowOffsetX *= resizedShadowScale;
        context.shadowOffsetY *= resizedShadowScale;
        context.shadowBlur *= resizedShadowScale;
        context.fillStyle = SoberMeStyleKit.redForSignUp;
        context.fill();
        context.restore();

        context.fillStyle = SoberMeStyleKit.textColorForButtons;
        context.font = '12px HelveticaNeue, "Helvetica Neue", Helvetica, Arial, sans-serif';
        context.textAlign = 'center';
        var signUpTotalHeight = 12 * 1.3;
        context.fillText('Sign Up', signUpRect.x + signUpRect.w/2, signUpRect.y + 11 + signUpRect.h / 2 - signUpTotalHeight / 2);
        
        context.restore();

    }

    function drawSignInScreen(canvas, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 222, 286), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 222, resizedFrame.h / 286);


        //// Symbol 2 Drawing
        var symbol2Rect = makeRect(46, 201, 129, 29);
        context.save();
        context.beginPath();
        context.rect(symbol2Rect.x, symbol2Rect.y, symbol2Rect.w, symbol2Rect.h);
        context.clip();
        context.translate(symbol2Rect.x, symbol2Rect.y);

        SoberMeStyleKit.drawSignUpBtn(canvas, 1, makeRect(0, 0, symbol2Rect.w, symbol2Rect.h), 'stretch');
        context.restore();


        //// signUpBtnText Drawing
        var signUpBtnTextRect = makeRect(58, 239, 105, 9);
        context.fillStyle = 'rgb(85, 85, 85)';
        context.font = '6px -apple-system, "Helvetica Neue", Helvetica, sans-serif';
        context.textAlign = 'left';
        var signUpBtnTextTotalHeight = 6 * 1.3;
        context.fillText('Already have an account? Sign in!', signUpBtnTextRect.x, signUpBtnTextRect.y + 6 + signUpBtnTextRect.h / 2 - signUpBtnTextTotalHeight / 2);


        //// Group
        //// confirmPassword Drawing
        roundedRect(context, 36, 162, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();


        //// createPassword Drawing
        roundedRect(context, 36, 136, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();


        //// mailTextFIeld Drawing
        roundedRect(context, 36, 110, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();




        //// Symbol 3 Drawing
        var symbol3Rect = makeRect(8, 0, 205, 56);
        context.save();
        context.beginPath();
        context.rect(symbol3Rect.x, symbol3Rect.y, symbol3Rect.w, symbol3Rect.h);
        context.clip();
        context.translate(symbol3Rect.x, symbol3Rect.y);

        SoberMeStyleKit.drawLogo(canvas, makeRect(0, 0, symbol3Rect.w, symbol3Rect.h), 'stretch');
        context.restore();
        
        context.restore();

    }

    function drawTextFIeld(canvas, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 149, 16), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 149, resizedFrame.h / 16);


        //// textField Drawing
        roundedRect(context, 0, 0, 149, 16, 4);
        context.fillStyle = SoberMeStyleKit.textFieldColor;
        context.fill();
        
        context.restore();

    }

    function drawLogo(canvas, targetFrame, resizing) {
        //// General Declarations
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        var context = canvas.getContext('2d');
        var pixelRatio = canvas.paintCodePixelRatio;
        
        //// Resize to Target Frame
        context.save();
        var resizedFrame = applyResizingBehavior(resizing, makeRect(0, 0, 633, 173), targetFrame);
        context.translate(resizedFrame.x, resizedFrame.y);
        context.scale(resizedFrame.w / 633, resizedFrame.h / 173);



        //// Image Declarations
        var soberMe232 = new Image();
        soberMe232.src = 'images/soberMe232.png';

        //// logoImage Drawing
        context.beginPath();
        context.rect(0, 0, 633, 173);
        context.save();
        context.clip();
        context.drawImage(soberMe232, 0, 0, soberMe232.width, soberMe232.height);
        context.restore();
        
        context.restore();

    }

    //// Infrastructure

    function clearCanvas(canvas) {
        canvas = initializeCanvas(typeof canvas === 'string' ? document.getElementById(canvas) : canvas);
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
    }

    // Possible arguments for 'resizing' parameter are:
    //   'aspectfit': The content is proportionally resized to fit into the target rectangle.
    //   'aspectfill': The content is proportionally resized to completely fill the target rectangle.
    //   'stretch': The content is stretched to match the entire target rectangle.
    //   'center': The content is centered in the target rectangle, but it is NOT resized.
    function applyResizingBehavior(resizing, rect, targetRect) {
        if (targetRect === undefined || equalRects(rect, targetRect) || equalRects(targetRect, makeRect(0, 0, 0, 0))) {
            return rect;
        }

        var scales = makeSize(0, 0);
        scales.w = Math.abs(targetRect.w / rect.w);
        scales.h = Math.abs(targetRect.h / rect.h);

        switch (resizing) {
            case 'aspectfit': {
                scales.w = Math.min(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'aspectfill': {
                scales.w = Math.max(scales.w, scales.h);
                scales.h = scales.w;
                break;
            }
            case 'stretch':
            case undefined:
                break;
            case 'center': {
                scales.w = 1;
                scales.h = 1;
                break;
            }
            default:
                throw 'Unknown resizing behavior "' + resizing + '". Use "aspectfit", "aspectfill", "stretch" or "center" as resizing behavior.';
        }

        var result = makeRect(Math.min(rect.x, rect.x + rect.w), Math.min(rect.y, rect.y + rect.h), Math.abs(rect.w), Math.abs(rect.h));
        result.w *= scales.w;
        result.h *= scales.h;
        result.x = targetRect.x + (targetRect.w - result.w) / 2;
        result.y = targetRect.y + (targetRect.h - result.h) / 2;
        return result;
    }

    function roundedRect(context, x, y, w, h, r) {
        context.beginPath();
        context.arc(x+r, y+r, r, Math.PI, 1.5*Math.PI);
        context.arc(x+w-r, y+r, r, 1.5*Math.PI, 2*Math.PI);
        context.arc(x+w-r, y+h-r, r, 0, 0.5*Math.PI);
        context.arc(x+r, y+h-r, r, 0.5*Math.PI, Math.PI);
        context.closePath();
    }

    function makeRect(x, y, w, h) {
        return { x: x, y: y, w: w, h: h };
    }

    function equalRects(r1, r2) {
        return r1.x === r2.x && r1.y === r2.y && r1.w == r2.w && r1.h === r2.h;
    }

    function makeShadow(color, offsetX, offsetY, blurRadius) {
        return function (context) {
            context.shadowColor = color;
            context.shadowOffsetX = offsetX;
            context.shadowOffsetY = offsetY;
            context.shadowBlur = blurRadius;
        }
    }

    function makeSize(w, h) {
        return { w: w, h: h };
    }

    function initializeCanvas(canvas) {
        if ('paintCodePixelRatio' in canvas) return canvas;
        // This function should only be called once on each canvas.
        var context = canvas.getContext('2d');

        var devicePixelRatio = window.devicePixelRatio || 1;
        var backingStorePixelRatio = context.webkitBackingStorePixelRatio
            || context.mozBackingStorePixelRatio
            || context.msBackingStorePixelRatio
            || context.oBackingStorePixelRatio
            || context.backingStorePixelRatio
            || 1;

        var pixelRatio = devicePixelRatio / backingStorePixelRatio;

        canvas.style.width = canvas.width + 'px';
        canvas.style.height = canvas.height + 'px';
        canvas.width *= pixelRatio;
        canvas.height *= pixelRatio;
        canvas.paintCodePixelRatio = pixelRatio;

        context.scale(pixelRatio, pixelRatio);
        return canvas;
    }

    function makeColor(r, g, b, a) {
        return 'rgba(' + Math.round(255*r) + ', ' + Math.round(255*g) + ', ' + Math.round(255*b) + ', ' + a + ')';
    }

    //// Public Interface

    // Colors
    SoberMeStyleKit.soberColor = 'rgba(165, 165, 165, 1)';
    SoberMeStyleKit.greenForLogo = 'rgba(114, 219, 100, 1)';
    SoberMeStyleKit.textColorForButtons = 'rgba(243, 243, 243, 1)';
    SoberMeStyleKit.redForSignUp = 'rgba(255, 73, 73, 1)';
    SoberMeStyleKit.textFieldColor = 'rgba(213, 213, 213, 1)';
    SoberMeStyleKit.btnShadowColor = 'rgba(85, 85, 85, 1)';

    // Shadows
    SoberMeStyleKit.btnShadow = function (context, pixelRatio) {
    context.shadowOffsetX = 0*pixelRatio;
    context.shadowOffsetY = 1*pixelRatio;
    context.shadowBlur = 1*pixelRatio;
    context.shadowColor = 'rgba(85, 85, 85, 0.35)';
};

    // Drawing Methods
    SoberMeStyleKit.drawLogInScreen = drawLogInScreen;
    SoberMeStyleKit.drawSignInBtn = drawSignInBtn;
    SoberMeStyleKit.drawSignUpBtn = drawSignUpBtn;
    SoberMeStyleKit.drawSignInScreen = drawSignInScreen;
    SoberMeStyleKit.drawTextFIeld = drawTextFIeld;
    SoberMeStyleKit.drawLogo = drawLogo;

    // Utilities
    SoberMeStyleKit.clearCanvas = clearCanvas;
    SoberMeStyleKit.makeShadow = makeShadow;
    SoberMeStyleKit.makeColor = makeColor;
    SoberMeStyleKit.makeRect = makeRect;

})();
